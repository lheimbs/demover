#!/bin/bash

# Move desktop-environment from main computer onto fresh installed distro

# VARIABLES
PKGMGR=""
PKGINSTALL=""
BUILDFROMSOURCE=""
PKGMGR_UPDATE=""
PACKAGES="packages"
CONFIGS="configs/"
LINKS="links"
VERBOSE=""

# functions:
usage() {
    echo "Script to move a given desktop-configuration to a newly installed distro." >&2
    echo >&2
    echo "Usage: ${0} [Arguments] PKGMGR       install desktopenvironment" >&2
    echo "With no arguments given: Read packages from $(dirname '${0}')/packages, configs from $(dirname '${0}')/configs/ and links from $(dirname '${0}')/links." >&2
    echo "PKGMGR is the packagemanager thats used on the distro." >&2
    echo >&2
    echo "Arguments:" >&2
    echo "      -p FILE     Specify a file that contains the packages that are to be installed." >&2
    echo "      -c FOLDER   Specify a folder to look for config files." >&2
    echo "      -l FILE     Specify a file that contains links to packages from AUR/GIT." >&2
    echo "      -v          Increase verbosity." >&2
}

confirm_selection() {
    read -r -p "Are you sure? [y/N] " response
    case "$response" in 
        [yY][eE][sS]|[yY]|[jJ][aA])
            return 1
            ;;
        *)
            return 0
            ;;
    esac
}

title () {
    echo "=================================================="
    echo "==========  Desktop Environment Mover  ==========="
    echo "=================================================="
    echo
}

vlog() {
    local MESSAGE="${@}"
    if [[ "${VERBOSE}" = 'true' ]]; then
        echo "${MESSAGE}"
    fi
}

echo_status() {
    vlog "Verbose mode is on."

    vlog "Packagemanager: ${PKGMGR}."
    vlog "Package Install Command: ${PKGINSTALL}."
    if [[ ${BUILDFROMSOURCE} != "" ]]; then
        vlog "Build from source command: ${BUILDFROMSOURCE}."
    fi
    vlog "Packages file: ${PACKAGES}."
    vlog "Configs folder: ${CONFIGS}."
    vlog "Links for additional GIT/AUR Packages: ${LINKS}."
}

# Get pkgmgr-cmd and pkmgr builf from source if availabe
read-pkgmgr-file() {
    if [[ -f "pkgmgrs/${PKGMGR}" ]]; then
        vlog "Reading from file 'pkgmgrs/${PKGMGR}'"
        while IFS= read -r LINE; do
            IFS=':' read -ra PART <<< "$LINE"
            vlog "${PART[0]}: ${PART[1]}"
            if [[ ${PART[0]} = "pkg-install" ]]; then
                PKGINSTALL="${PART[1]}"
            elif [[ ${PART[0]} = "build-from-source" ]]; then
                BUILDFROMSOURCE="${PART[1]}"
            elif [[ ${PART[0]} = "update" ]]; then
                PKGMGR_UPDATE="${PART[1]}"
            fi
        done < "pkgmgrs/${PKGMGR}"
    else
        vlog "File 'pkgmgrs/${PKGMGR}' invalid."
    fi
}




# ==================================================================
# ==============  SCRIPT START =====================================
# ==================================================================

# user needs rot access to run; exitcode 1 = no root
if [[ ${UID} -ne 0 ]]; then
    echo "You need root privileges to run this script!"
    exit 1
fi

# parse options
# EXITSTATUS 3: file is not a valid textfile
# EXITSTATUS 4: folder is not valid
while getopts vp:c:l OPTION; do
    case ${OPTION} in
        v)
            VERBOSE='true'
            ;;
        p)
            if [[ -f ${OPTARG} ]]; then
                PACKAGES=${OPTARG} 
            else
                echo "${OPTARG} is not a valid file." >&2
                exit 3
            fi
            ;;
        c)
            if [[ -d ${OPTARG} ]]; then
                CONFIGS=${OPTARG} 
            else
                echo "${OPTARG} is not a valid folder." >&2
                exit 4
            fi
            ;;
        l)
            if [[ -f ${OPTARG} ]]; then
                LINKS=${OPTARG} 
            else
                echo "${OPTARG} is not a valid file." >&2
                exit 3
            fi
            ;;
    esac
done

# Remove the options, if pkgmgr argument is mussing: EXITCODE 2 = no pkgmgr supplied
shift "$(( OPTIND - 1 ))"
if [[ "${#}" -ne 1 ]]; then
    usage
    exit 2
fi

PKGMGR=${@}

# get pkginstall and buildfromsource commands
read-pkgmgr-file
echo_status

# update package list
if [[ ${PKGMGR_UPDATE} != "" ]]; then
    echo "Updating Package list."
    if [[ ${VERBOSE} == 'true' ]]; then
        ${PKGMGR_UPDATE}
    else
        ${PKGMGR_UPDATE} > /dev/null
    fi
fi


IFS=$'\r\n :'
GLOBIGNORE='*'
command eval 'PACKAGES_LIST=($(cat ${PACKAGES}))'

echo "${PACKAGES_LIST[@]}"

# iterate over array
for PKGPART in "${PACKAGES_LIST[@]}"; do
    INSTALL="${PKGINSTALL} ${PKGPART[0]}"
    echo "Proposing to run '${INSTALL}'."
    confirm_selection "Execute command?"
    if [[ ${?} -eq 1 ]]; then
        if [[ ${VERBOSE} = 'true' ]]; then
            yes | $INSTALL
        else
            yes | $INSTALL > /dev/null
        fi
    else
        vlog "${PKGPART[0]} will not be installed."
    fi
done
